#!/usr/bin/env bash

set -x

if [[ ! $# -eq 1 ]]
then
    echo "-- No branch or tag specified; cloning the default branch."
    branch=""
    branch_name=dev
else
    echo "-- Cloning $1."
    branch="--branch gcc-$1-release"
    branch_name=$1
fi

rm -rf gcc
rm -rf built

git clone git://gcc.gnu.org/git/gcc.git --depth=1 $branch gcc || { echo "Couldn't clone GCC."; exit 1; }
mkdir built

gcc_dir=$(readlink -f ./gcc)
built_dir=$(readlink -f ./built)

docker run -v $gcc_dir:/gcc -v $built_dir:/built-gcc --rm ubuntu:wily /bin/bash -c '
core_number=$(cat /proc/cpuinfo | grep processor -c)
make_j=$(($core_number * 3 / 2))

apt-get update
apt-get install build-essential gcc g++ libgmp-dev libmpfr-dev libmpc-dev gcc-multilib g++-multilib flex bison sudo -y

TARGET_GID=$(stat -c "%g" /gcc)
EXISTS=$(cat /etc/group | grep $TARGET_GID | wc -l)

useradd builder

# Create new group using target GID and add builder user
if [ $EXISTS == "0" ]; then
    groupadd -g $TARGET_GID tempgroup
    usermod -a -G tempgroup builder
else
    # GID exists, find group name and add
    GROUP=$(getent group $TARGET_GID | cut -d: -f1)
    usermod -a -G $GROUP builder
fi

sudo -u builder bash - << EOF

cd gcc
./configure --enable-languages=c,c++ --prefix=/usr

make -j$make_j -l$core_number
make DESTDIR=/built-gcc install

EOF
'
exit_status=$?

rm -rf gcc

[[ $exit_status -eq 0 ]] || { echo "Building GCC failed."; exit 1; }

pushd built/usr/bin
ln -sf gcc cc
ln -sf g++ c++
popd

echo "-- Creating final image."

docker rm gcc-$branch_name || true
docker run --name gcc-$branch_name ubuntu:wily true
docker cp ./built gcc-$branch_name:/

docker commit gcc-$branch_name gcc:$branch_name


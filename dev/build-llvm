#!/usr/bin/env bash

set -x

if [[ ! $# -eq 1 ]]
then
    echo "-- No branch or tag specified; cloning the default branch."
    branch=""
    branch_name=dev
else
    echo "-- Cloning llvmorg-$1."
    branch="--branch llvmorg-$1"
    branch_name=$1
fi

current_dir=$(dirname $(realpath -s "${BASH_SOURCE[0]}"))

rm -rf built

container_name=build-llvm-$(hostname)-$$

docker run --name "${container_name}" -e branch="${branch}" -e http_proxy=${http_proxy} -e https_proxy=${https_proxy} ubuntu:rolling /bin/bash -c '
set -x

core_number=$(cat /proc/cpuinfo | grep processor -c)
make_j=$(($core_number * 3 / 2))

apt-get update
apt-get install build-essential gcc g++ sudo cmake python git -y

mkdir /built

git clone https://github.com/llvm/llvm-project.git --depth=1 $branch llvm || { echo "Couldn'"'"'t clone LLVM."; exit 1; }

cd llvm/llvm

mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/built/usr/local -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi;compiler-rt;lld"

make -j$make_j -l$core_number
make install
' || {
    docker rm ${container_name}
    echo "Building llvm failed."
    exit 1
}

echo "-- Creating final image."

set -e

docker cp ${container_name}:/built ./built
docker rm ${container_name}

pushd built/usr/local/bin
ln -sf clang cc

# create wrappers for clang++ and ld to use libc++ by default
# when called through c++ (and, well, ld)
# this is not an image for gcc, so we don't care about ld being somewhat broken for it this way
mkdir clang-wrappers
cd clang-wrappers

echo '#!/bin/sh
clang++ -stdlib=libc++ $@' > c++
echo '#!/bin/sh
ld.lld $@ -lc++ -lc++abi -lpthread' > ld
chmod +x c++ ld
popd

docker build -f $current_dir/llvm.docker --build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} -t llvm:$branch_name .

